name: release

on:
  push:
    tags:
      - v*

permissions: {}

jobs:
  build:
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    outputs:
      manifest-digest: ${{ steps.publish-image.outputs.MANIFEST_DIGEST }}
      platform-map: ${{ steps.publish-image.outputs.PLATFORM_MAP }}
    steps:
      - name: Clone repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false
      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: "service-a/go.mod"
          cache: false

      - uses: ko-build/setup-ko@d006021bd0c28d1ce33a07e7943d48b079944c8d # v0.9
        with:
          version: v0.18.0

      - name: Build and push
        id: publish-image
        env:
          IMAGE_VERSION: ${{ github.ref_name }}
          KO_DOCKER_REPO: "ghcr.io/${{ github.repository }}"
        run: |
          # Create SBOM directory
          mkdir -p ./sboms
          
          # Build multi-platform with SBOMs
          ko build --sbom=spdx --sbom-dir ./sboms --image-refs ./image-digest service-a/main.go --bare --platform linux/amd64,linux/arm64,linux/arm/v7 -t ${IMAGE_VERSION} \
            --image-label org.opencontainers.image.title=spffie-ambient-auth-service-a \
            --image-label org.opencontainers.image.description="A test service for Spffie Ambient Auth" \
            --image-label org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }} \
            --image-label org.opencontainers.image.revision=${{ github.sha }} \
            --image-label org.opencontainers.image.version=${IMAGE_VERSION} \
            --image-label org.opencontainers.image.created="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" 
          
          # Get the manifest digest
          MANIFEST_DIGEST=$(cat ./image-digest | cut -d@ -f2)
          {
            echo 'MANIFEST_DIGEST<<EOF'
            echo "$MANIFEST_DIGEST"
            echo EOF
          } >> "$GITHUB_OUTPUT"
          
          # Extract platform-specific digests from SBOM files
          echo "Extracting platform digests from SBOMs..."
          
          # Find the index SBOM file (contains platform-specific digest information)
          INDEX_SBOM_FILE=$(find ./sboms -name "*index.spdx.json" | head -n1)
          if [ ! -f "$INDEX_SBOM_FILE" ]; then
            echo "Error: Index SBOM file not found"
            exit 1
          fi
          
          echo "Using index SBOM: $INDEX_SBOM_FILE"
          
          # Create platform mapping as JSON
          PLATFORM_MAP="["
          FIRST=true
          
          for PLATFORM in "linux-amd64" "linux-arm64" "linux-arm-v7"; do
            PLATFORM_VERSION=$(echo "$PLATFORM" | sed 's/-/\//g')
            SBOM_FILE=$(find ./sboms -name "*${PLATFORM}.spdx.json" | head -n1)
            
            # Extract digest from index SBOM for this platform
            DIGEST=$(jq -r ".packages[] | select(.versionInfo == \"$PLATFORM_VERSION\" and .primaryPackagePurpose == \"CONTAINER\") | .checksums[0].checksumValue" "$INDEX_SBOM_FILE")
            
            if [ -z "$DIGEST" ] || [ "$DIGEST" = "null" ]; then
              echo "Error: Could not find digest for platform $PLATFORM_VERSION in index SBOM"
              exit 1
            fi
            
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              PLATFORM_MAP="$PLATFORM_MAP,"
            fi
            
            if [ -f "$SBOM_FILE" ]; then
              PLATFORM_MAP="$PLATFORM_MAP{\"platform\":\"$PLATFORM_VERSION\",\"digest\":\"$DIGEST\",\"sbom\":\"$SBOM_FILE\"}"
              echo "Found $PLATFORM_VERSION: $DIGEST -> $SBOM_FILE"
            else
              echo "Warning: $PLATFORM SBOM not found, but digest available from index"
              PLATFORM_MAP="$PLATFORM_MAP{\"platform\":\"$PLATFORM_VERSION\",\"digest\":\"$DIGEST\",\"sbom\":null}"
              echo "Platform $PLATFORM_VERSION: $DIGEST (no SBOM file)"
            fi
          done
          
          PLATFORM_MAP="$PLATFORM_MAP]"
          {
            echo 'PLATFORM_MAP<<EOF'
            echo "$PLATFORM_MAP"
            echo EOF
          } >> "$GITHUB_OUTPUT"
          
          echo "Platform digest mapping:"
          echo "  Manifest: $MANIFEST_DIGEST"
          echo "$PLATFORM_MAP" | jq -r '.[] | "  \(.platform): sha256:\(.digest)"'
          
          # TODO: Add SBOM enrichment here in the future
          # You can modify the SBOM files before attestation
          # For example: add custom metadata, vulnerability scan results, etc.

      - name: Upload SBOMs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sboms
          path: ./sboms/
          retention-days: 1

  attest:
    needs: build
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download SBOMs
        uses: actions/download-artifact@v4
        with:
          name: sboms
          path: ./sboms/

      - name: Install cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1
        with:
          cosign-release: "v2.2.2"

      - name: Extract platform info
        id: platform-info
        env:
          PLATFORM_MAP: ${{ needs.build.outputs.platform-map }}
          CURRENT_PLATFORM: ${{ matrix.platform }}
        run: |
          PLATFORM_INFO=$(echo "$PLATFORM_MAP" | jq -r ".[] | select(.platform == \"$CURRENT_PLATFORM\")")
          DIGEST=$(echo "$PLATFORM_INFO" | jq -r '.digest')
          SBOM=$(echo "$PLATFORM_INFO" | jq -r '.sbom')
          
          # Check if we have a valid digest
          if [ "$DIGEST" = "null" ] || [ -z "$DIGEST" ]; then
            echo "No digest available for platform $CURRENT_PLATFORM, skipping attestation"
            echo "SKIP_ATTESTATION=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if we have SBOM file for SBOM attestation
          if [ "$SBOM" = "null" ] || [ -z "$SBOM" ]; then
            echo "No SBOM file available for platform $CURRENT_PLATFORM, will skip SBOM attestation only"
            echo "SKIP_SBOM_ATTESTATION=true" >> $GITHUB_OUTPUT
          else
            echo "SKIP_SBOM_ATTESTATION=false" >> $GITHUB_OUTPUT
          fi
          
          # Add sha256: prefix for cosign
          DIGEST_WITH_PREFIX="sha256:$DIGEST"
          
          echo "DIGEST=$DIGEST_WITH_PREFIX" >> $GITHUB_OUTPUT
          echo "SBOM=$SBOM" >> $GITHUB_OUTPUT
          echo "SKIP_ATTESTATION=false" >> $GITHUB_OUTPUT
          
          echo "Platform: $CURRENT_PLATFORM"
          echo "Digest: $DIGEST_WITH_PREFIX"
          echo "SBOM: $SBOM"

      - name: Attest build provenance
        if: steps.platform-info.outputs.SKIP_ATTESTATION == 'false'
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        with:
          subject-name: "ghcr.io/${{ github.repository }}"
          subject-digest: ${{ steps.platform-info.outputs.DIGEST }}
          push-to-registry: true

      - name: Sign and attach SBOM
        if: steps.platform-info.outputs.SKIP_ATTESTATION == 'false' && steps.platform-info.outputs.SKIP_SBOM_ATTESTATION == 'false'
        env:
          REPO_URI: "ghcr.io/${{ github.repository }}"
        run: |
          echo "Attesting SBOM for ${{ matrix.platform }}..."
          echo "  Image: ${REPO_URI}@${{ steps.platform-info.outputs.DIGEST }}"
          echo "  SBOM:  ${{ steps.platform-info.outputs.SBOM }}"
          
          cosign attest --yes --predicate "${{ steps.platform-info.outputs.SBOM }}" --type spdxjson \
            "${REPO_URI}@${{ steps.platform-info.outputs.DIGEST }}"
          
          echo "Successfully attested SBOM for ${{ matrix.platform }}"
          echo "To verify: cosign download attestation --predicate-type https://spdx.dev/Document ${REPO_URI}@${{ steps.platform-info.outputs.DIGEST }}"
