name: release

on:
  push:
    tags:
      - v*

permissions: {}

jobs:
  image:
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false
      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: "service-a/go.mod"
          cache: false

      - uses: ko-build/setup-ko@d006021bd0c28d1ce33a07e7943d48b079944c8d # v0.9
        with:
          version: v0.18.0

      - name: Install cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1
        with:
          cosign-release: "v2.2.2"

      - name: Build and push
        id: publish-image
        env:
          IMAGE_VERSION: ${{ github.ref_name }}
          KO_DOCKER_REPO: "ghcr.io/${{ github.repository }}"
        run: |
          # Create SBOM directory
          mkdir -p ./sboms
          
          # Build multi-platform with SBOMs
          ko build --sbom=spdx --sbom-dir ./sboms --image-refs ./image-digest service-a/main.go --bare --platform linux/amd64,linux/arm64 -t ${IMAGE_VERSION} \
            --image-label org.opencontainers.image.title=spffie-ambient-auth-service-a \
            --image-label org.opencontainers.image.description="A test service for Spffie Ambient Auth" \
            --image-label org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }} \
            --image-label org.opencontainers.image.revision=${{ github.sha }} \
            --image-label org.opencontainers.image.version=${IMAGE_VERSION} \
            --image-label org.opencontainers.image.created="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" 
          
          # Get the manifest digest
          MANIFEST_DIGEST=$(cat ./image-digest | cut -d@ -f2)
          echo "MANIFEST_DIGEST=$MANIFEST_DIGEST" >> $GITHUB_OUTPUT
          
          # Extract platform-specific digests from SBOM files
          echo "Extracting platform digests from SBOMs..."
          
          # Find and process AMD64 SBOM
          AMD64_SBOM=$(find ./sboms -name "*linux-amd64.spdx.json" | head -n1)
          if [ -f "$AMD64_SBOM" ]; then
            AMD64_DIGEST=$(jq -r '.packages[] | select(.versionInfo == "linux/amd64" and .primaryPackagePurpose == "CONTAINER") | .checksums[0].checksumValue' "$AMD64_SBOM")
            echo "AMD64_DIGEST=$AMD64_DIGEST" >> $GITHUB_OUTPUT
            echo "AMD64_SBOM=$AMD64_SBOM" >> $GITHUB_OUTPUT
            echo "Found AMD64: $AMD64_DIGEST -> $AMD64_SBOM"
          else
            echo "Error: AMD64 SBOM not found"
            exit 1
          fi
          
          # Find and process ARM64 SBOM
          ARM64_SBOM=$(find ./sboms -name "*linux-arm64.spdx.json" | head -n1)
          if [ -f "$ARM64_SBOM" ]; then
            ARM64_DIGEST=$(jq -r '.packages[] | select(.versionInfo == "linux/arm64" and .primaryPackagePurpose == "CONTAINER") | .checksums[0].checksumValue' "$ARM64_SBOM")
            echo "ARM64_DIGEST=$ARM64_DIGEST" >> $GITHUB_OUTPUT
            echo "ARM64_SBOM=$ARM64_SBOM" >> $GITHUB_OUTPUT
            echo "Found ARM64: $ARM64_DIGEST -> $ARM64_SBOM"
          else
            echo "Error: ARM64 SBOM not found"
            exit 1
          fi
          
          # Create digest mapping for attestation
          echo "Platform digest mapping:"
          echo "  Manifest: $MANIFEST_DIGEST"
          echo "  AMD64:    $AMD64_DIGEST"
          echo "  ARM64:    $ARM64_DIGEST"
          
          # TODO: Add SBOM enrichment here in the future
          # You can modify the SBOM files before attestation
          # For example: add custom metadata, vulnerability scan results, etc.

      - name: Attest build provenance
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        id: attest
        with:
          subject-name: "ghcr.io/${{ github.repository }}"
          subject-digest: ${{ steps.publish-image.outputs.MANIFEST_DIGEST }}
          push-to-registry: true

      - name: Sign and attach SBOMs
        env:
          REPO_URI: "ghcr.io/${{ github.repository }}"
        run: |
          # Attest SBOM for AMD64 platform
          echo "Attesting SBOM for linux/amd64..."
          echo "  Image: ${REPO_URI}@${{ steps.publish-image.outputs.AMD64_DIGEST }}"
          echo "  SBOM:  ${{ steps.publish-image.outputs.AMD64_SBOM }}"
          cosign attest --yes --predicate ${{ steps.publish-image.outputs.AMD64_SBOM }} --type spdxjson \
            "${REPO_URI}@${{ steps.publish-image.outputs.AMD64_DIGEST }}"
          
          # Attest SBOM for ARM64 platform  
          echo "Attesting SBOM for linux/arm64..."
          echo "  Image: ${REPO_URI}@${{ steps.publish-image.outputs.ARM64_DIGEST }}"
          echo "  SBOM:  ${{ steps.publish-image.outputs.ARM64_SBOM }}"
          cosign attest --yes --predicate ${{ steps.publish-image.outputs.ARM64_SBOM }} --type spdxjson \
            "${REPO_URI}@${{ steps.publish-image.outputs.ARM64_DIGEST }}"
          
          echo "Successfully attested SBOMs for both platforms"
          echo ""
          echo "To verify SBOMs:"
          echo "  AMD64: cosign download attestation --predicate-type https://spdx.dev/Document ${REPO_URI}@${{ steps.publish-image.outputs.AMD64_DIGEST }}"
          echo "  ARM64: cosign download attestation --predicate-type https://spdx.dev/Document ${REPO_URI}@${{ steps.publish-image.outputs.ARM64_DIGEST }}"
